from typing import List, Dict
from dataclasses import dataclass

@dataclass
class PrintJob:
    id: str
    volume: float
    priority: int
    print_time: int

@dataclass
class PrinterConstraints:
    max_volume: float
    max_items: int


def optimize_printing(print_jobs: List[Dict], constraints: Dict) -> Dict:
    """
    –û–ø—Ç–∏–º—ñ–∑—É—î —á–µ—Ä–≥—É 3D-–¥—Ä—É–∫—É –∑–≥—ñ–¥–Ω–æ –∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ —Ç–∞ –æ–±–º–µ–∂–µ–Ω–Ω—è–º–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞.
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∂–∞–¥—ñ–±–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥.
    """
    # –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —É dataclass
    jobs = [PrintJob(**job) for job in print_jobs]
    printer = PrinterConstraints(**constraints)

    # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º (1 ‚Äî –Ω–∞–π–≤–∏—â–∏–π), –ø–æ—Ç—ñ–º –∑–∞ —á–∞—Å–æ–º
    jobs.sort(key=lambda j: (j.priority, j.print_time))

    total_time = 0
    print_order = []
    group = []
    current_volume = 0

    for job in jobs:
        # –Ø–∫—â–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ –ø–µ—Ä–µ–≤–∏—â—É—î –æ–±–º–µ–∂–µ–Ω–Ω—è ‚Äî –¥—Ä—É–∫—É—î–º–æ –≥—Ä—É–ø—É
        if (len(group) >= printer.max_items) or (current_volume + job.volume > printer.max_volume):
            # –ß–∞—Å –¥—Ä—É–∫—É –≥—Ä—É–ø–∏ = –º–∞–∫—Å. —á–∞—Å –æ–¥–Ω—ñ—î—ó –º–æ–¥–µ–ª—ñ
            group_time = max(j.print_time for j in group)
            total_time += group_time
            print_order.extend(j.id for j in group)

            # –û—á–∏—â–∞—î–º–æ –≥—Ä—É–ø—É
            group = []
            current_volume = 0

        # –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –º–æ–¥–µ–ª—å —É –≥—Ä—É–ø—É
        group.append(job)
        current_volume += job.volume

    # –î—Ä—É–∫—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é –≥—Ä—É–ø—É
    if group:
        group_time = max(j.print_time for j in group)
        total_time += group_time
        print_order.extend(j.id for j in group)

    return {
        "print_order": print_order,
        "total_time": total_time
    }


# üîπ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è
def test_printing_optimization():
    test1_jobs = [
        {"id": "M1", "volume": 100, "priority": 1, "print_time": 120},
        {"id": "M2", "volume": 150, "priority": 1, "print_time": 90},
        {"id": "M3", "volume": 120, "priority": 1, "print_time": 150}
    ]

    test2_jobs = [
        {"id": "M1", "volume": 100, "priority": 2, "print_time": 120},
        {"id": "M2", "volume": 150, "priority": 1, "print_time": 90},
        {"id": "M3", "volume": 120, "priority": 3, "print_time": 150}
    ]

    test3_jobs = [
        {"id": "M1", "volume": 250, "priority": 1, "print_time": 180},
        {"id": "M2", "volume": 200, "priority": 1, "print_time": 150},
        {"id": "M3", "volume": 180, "priority": 2, "print_time": 120}
    ]

    constraints = {
        "max_volume": 300,
        "max_items": 2
    }

    print("–¢–µ—Å—Ç 1 (–æ–¥–Ω–∞–∫–æ–≤–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç):")
    r1 = optimize_printing(test1_jobs, constraints)
    print(f"–ü–æ—Ä—è–¥–æ–∫ –¥—Ä—É–∫—É: {r1['print_order']}")
    print(f"–ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å: {r1['total_time']} —Ö–≤–∏–ª–∏–Ω")

    print("\n–¢–µ—Å—Ç 2 (—Ä—ñ–∑–Ω—ñ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∏):")
    r2 = optimize_printing(test2_jobs, constraints)
    print(f"–ü–æ—Ä—è–¥–æ–∫ –¥—Ä—É–∫—É: {r2['print_order']}")
    print(f"–ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å: {r2['total_time']} —Ö–≤–∏–ª–∏–Ω")

    print("\n–¢–µ—Å—Ç 3 (–ø–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è –æ–±–º–µ–∂–µ–Ω—å):")
    r3 = optimize_printing(test3_jobs, constraints)
    print(f"–ü–æ—Ä—è–¥–æ–∫ –¥—Ä—É–∫—É: {r3['print_order']}")
    print(f"–ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å: {r3['total_time']} —Ö–≤–∏–ª–∏–Ω")


if __name__ == "__main__":
    test_printing_optimization()
